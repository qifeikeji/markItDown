name: Build AppImage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python-is-python3 build-essential
        
    - name: Configure npm
      run: |
        echo "registry=https://registry.npmmirror.com/" > .npmrc
        echo "electron_mirror=https://npmmirror.com/mirrors/electron/" >> .npmrc
        echo "electron-builder-binaries_mirror=https://npmmirror.com/mirrors/electron-builder-binaries/" >> .npmrc
        cat .npmrc
        
    - name: Clean install dependencies
      run: |
        echo "Removing old package-lock.json and node_modules..."
        rm -rf package-lock.json node_modules
        echo "Installing dependencies..."
        npm install --legacy-peer-deps
        echo "Dependencies installed successfully"
        
    - name: Update dependencies
      run: |
        echo "Updating dependencies to latest versions..."
        npm install --legacy-peer-deps @mui/material@5.15.0 @mui/lab@5.0.0-alpha.170
        npm install --legacy-peer-deps @emotion/react@latest @emotion/styled@latest
        npm install --legacy-peer-deps @testing-library/jest-dom@latest @testing-library/react@latest @testing-library/user-event@latest
        npm install --legacy-peer-deps babel-plugin-prismjs@latest dompurify@latest marked@latest prismjs@latest
        npm install --legacy-peer-deps react@latest react-dom@latest react-scripts@5 react-full-screen@latest react-icons@latest react-split@latest
        npm install --legacy-peer-deps --save-dev sass@latest electron@latest electron-builder@latest electron-is-dev@latest
        echo "Dependencies updated successfully"
        
    - name: Update Material-UI imports
      run: |
        echo "Updating Material-UI imports..."
        echo "Searching for files containing @mui/lab..."
        grep -r "@mui/lab" src/ || true
        echo "Searching for files containing Alert..."
        grep -r "Alert" src/ || true
        
        echo "Updating imports..."
        find src -type f \( -name "*.jsx" -o -name "*.js" \) | xargs sed -i 's|import { Alert } from .@mui/lab.|import { Alert } from .@mui/material.|g'
        find src -type f \( -name "*.jsx" -o -name "*.js" \) | xargs sed -i 's|import Alert from .@mui/lab.|import Alert from .@mui/material.|g'
        find src -type f \( -name "*.jsx" -o -name "*.js" \) | xargs sed -i 's|@material-ui/core|@mui/material|g'
        find src -type f \( -name "*.jsx" -o -name "*.js" \) | xargs sed -i 's|@material-ui/lab|@mui/lab|g'
        find src -type f \( -name "*.jsx" -o -name "*.js" \) | xargs sed -i 's|@material-ui/styles|@mui/styles|g'
        find src -type f \( -name "*.jsx" -o -name "*.js" \) | xargs sed -i 's|@material-ui/icons|@mui/icons-material|g'
        
        echo "Verifying imports after update..."
        grep -r "@mui/lab" src/ || true
        grep -r "Alert" src/ || true
        echo "Material-UI imports updated"
        
    - name: Update package.json
      run: |
        echo "Updating package.json configuration..."
        npm pkg set main="main.js"
        npm pkg set scripts.electron-dev="electron ."
        npm pkg set scripts.electron-pack="electron-builder"
        npm pkg set build.files="['build/**/*', 'main.js', 'node_modules/**/*']"
        npm pkg set build.asar=true
        npm pkg set build.asarUnpack="['node_modules/electron-is-dev/**/*']"
        npm pkg set build.appId="com.markitdown.app"
        npm pkg set build.productName="MarkItDown"
        npm pkg set build.linux.target="['AppImage']"
        npm pkg set build.linux.category="Office"
        echo "Package.json updated successfully"
        
    - name: Build React app
      run: |
        echo "Building React application..."
        echo "Current package.json:"
        cat package.json
        echo "Checking src directory structure:"
        ls -la src/
        echo "Running build..."
        npm run build || { 
          echo "Build failed, printing relevant files..."
          echo "Files containing Alert:"
          grep -r "Alert" src/ || true
          echo "Files containing @mui/lab:"
          grep -r "@mui/lab" src/ || true
          exit 1
        }
        echo "React build completed"
        echo "Checking build directory contents:"
        ls -la build/
      
    - name: Build AppImage
      run: |
        echo "Starting AppImage build process..."
        echo "Current directory structure:"
        ls -la
        echo "Build directory structure:"
        ls -la build/
        echo "Running electron-builder..."
        export NODE_OPTIONS=--openssl-legacy-provider
        npm run electron-pack -- --linux AppImage
        echo "Build completed, checking output..."
        ls -la dist/
      env:
        DEBUG: electron-builder
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Make AppImage executable
      run: |
        echo "Making AppImage executable..."
        chmod +x dist/*.AppImage
        echo "AppImage permissions updated"
        
    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: markItDown.AppImage
        path: dist/*.AppImage 
