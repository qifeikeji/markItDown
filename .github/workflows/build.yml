name: Build AppImage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python-is-python3 build-essential
        
    - name: Install dependencies
      run: |
        npm install
        npm uninstall node-sass @testing-library/user-event
        npm install --save sass electron-is-dev
        npm install --save-dev electron@latest electron-builder@latest
        
    - name: Update package.json
      run: |
        npm pkg set main="main.js"
        npm pkg set scripts.electron-dev="electron ."
        npm pkg set scripts.electron-pack="electron-builder"
        npm pkg set build.files="['build/**/*', 'main.js', 'node_modules/**/*']"
        npm pkg set build.asar=true
        npm pkg set build.asarUnpack="['node_modules/electron-is-dev/**/*']"
        npm pkg set build.appId="com.markitdown.app"
        npm pkg set build.productName="MarkItDown"
        npm pkg set build.linux.target="['AppImage']"
        npm pkg set build.linux.category="Office"
        
    - name: Build React app
      run: |
        export NODE_OPTIONS=--openssl-legacy-provider
        npm run build
      
    - name: Configure npm
      run: |
        echo "registry=https://registry.npmmirror.com/" > .npmrc
        echo "electron_mirror=https://npmmirror.com/mirrors/electron/" >> .npmrc
        echo "electron-builder-binaries_mirror=https://npmmirror.com/mirrors/electron-builder-binaries/" >> .npmrc
        
    - name: Build AppImage
      run: |
        echo "Starting build process..."
        echo "Current directory structure:"
        ls -la
        echo "Build directory structure:"
        ls -la build/
        echo "Running electron-builder..."
        export NODE_OPTIONS=--openssl-legacy-provider
        npm run electron-pack -- --linux AppImage
        echo "Build completed, checking output..."
        ls -la dist/
      env:
        DEBUG: electron-builder
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Make AppImage executable
      run: |
        chmod +x dist/*.AppImage
        
    - name: Upload AppImage
      uses: actions/upload-artifact@v4
      with:
        name: markItDown.AppImage
        path: dist/*.AppImage 
